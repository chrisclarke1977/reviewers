{"filter":false,"title":"passport.js","tooltip":"/config/passport.js","undoManager":{"mark":33,"position":33,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":204,"column":2},"action":"remove","lines":["var _ = require('lodash');","var passport = require('passport');","var LocalStrategy = require('passport-local').Strategy;","var FacebookStrategy = require('passport-facebook').Strategy;","var TwitterStrategy = require('passport-twitter').Strategy;","var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;","var OAuthStrategy = require('passport-oauth').OAuthStrategy; // Tumblr","var OAuth2Strategy = require('passport-oauth').OAuth2Strategy; // Venmo, Foursquare","var User = require('../models/User');","var secrets = require('./secrets');","","passport.serializeUser(function(user, done) {","  done(null, user.id);","});","","passport.deserializeUser(function(id, done) {","  User.findById(id, function(err, user) {","    done(err, user);","  });","});","","// Sign in using Email and Password.","","passport.use(new LocalStrategy({ usernameField: 'email' }, function(email, password, done) {","  User.findOne({ email: email }, function(err, user) {","    if (!user) return done(null, false, { message: 'Email ' + email + ' not found'});","    user.comparePassword(password, function(err, isMatch) {","      if (isMatch) {","        return done(null, user);","      } else {","        return done(null, false, { message: 'Invalid email or password.' });","      }","    });","  });","}));","","/**"," * OAuth Strategy Overview"," *"," * - User is already logged in."," *   - Check if there is an existing account with a <provider> id."," *     - If there is, return an error message. (Account merging not supported)"," *     - Else link new OAuth account with currently logged-in user."," * - User is not logged in."," *   - Check if it's a returning user."," *     - If returning user, sign in and we are done."," *     - Else check if there is an existing account with user's email."," *       - If there is, return an error message."," *       - Else create a new account."," */","","// Sign in with Facebook.","","passport.use(new FacebookStrategy(secrets.facebook, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ facebook: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Facebook account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.facebook = profile.id;","          user.tokens.push({ kind: 'facebook', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.gender = user.profile.gender || profile._json.gender;","          user.profile.picture = user.profile.picture || 'https://graph.facebook.com/' + profile.id + '/picture?type=large';","          user.save(function(err) {","            req.flash('info', { msg: 'Facebook account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ facebook: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.email }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Facebook manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.email = profile._json.email;","          user.facebook = profile.id;","          user.tokens.push({ kind: 'facebook', accessToken: accessToken });","          user.profile.name = profile.displayName;","          user.profile.gender = profile._json.gender;","          user.profile.picture = 'https://graph.facebook.com/' + profile.id + '/picture?type=large';","          user.profile.location = (profile._json.location) ? profile._json.location.name : '';","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","// Sign in with Twitter.","","passport.use(new TwitterStrategy(secrets.twitter, function(req, accessToken, tokenSecret, profile, done) {","  if (req.user) {","    User.findOne({ twitter: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Twitter account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.twitter = profile.id;","          user.tokens.push({ kind: 'twitter', accessToken: accessToken, tokenSecret: tokenSecret });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.location = user.profile.location || profile._json.location;","          user.profile.picture = user.profile.picture || profile._json.profile_image_url_https;","          user.save(function(err) {","            req.flash('info', { msg: 'Twitter account has been linked.' });","            done(err, user);","          });","        });","      }","    });","","  } else {","    User.findOne({ twitter: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      var user = new User();","      // Twitter will not provide an email address.  Period.","      // But a personâ€™s twitter username is guaranteed to be unique","      // so we can \"fake\" a twitter email address as follows:","      user.email = profile.username + \"@twitter.com\";","      user.twitter = profile.id;","      user.tokens.push({ kind: 'twitter', accessToken: accessToken, tokenSecret: tokenSecret });","      user.profile.name = profile.displayName;","      user.profile.location = profile._json.location;","      user.profile.picture = profile._json.profile_image_url_https;","      user.save(function(err) {","        done(err, user);","      });","    });","  }","}));","","// Sign in with Google.","","passport.use(new GoogleStrategy(secrets.google, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ google: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Google account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.google = profile.id;","          user.tokens.push({ kind: 'google', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.gender = user.profile.gender || profile._json.gender;","          user.profile.picture = user.profile.picture || profile._json.picture;","          user.save(function(err) {","            req.flash('info', { msg: 'Google account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ google: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.email }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Google manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.email = profile._json.email;","          user.google = profile.id;","          user.tokens.push({ kind: 'google', accessToken: accessToken });","          user.profile.name = profile.displayName;","          user.profile.gender = profile._json.gender;","          user.profile.picture = profile._json.picture;","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","// Login Required middleware.","","exports.isAuthenticated = function(req, res, next) {","  if (req.isAuthenticated()) return next();","  res.redirect('/login');","};","","// Authorization Required middleware.","","exports.isAuthorized = function(req, res, next) {","  var provider = req.path.split('/').slice(-1)[0];","","  if (_.find(req.user.tokens, { kind: provider })) {","    next();","  } else {","    res.redirect('/auth/' + provider);","  }","};"]},{"start":{"row":0,"column":0},"end":{"row":420,"column":2},"action":"insert","lines":["var _ = require('lodash');","var passport = require('passport');","var InstagramStrategy = require('passport-instagram').Strategy;","var LocalStrategy = require('passport-local').Strategy;","var FacebookStrategy = require('passport-facebook').Strategy;","var TwitterStrategy = require('passport-twitter').Strategy;","var GitHubStrategy = require('passport-github').Strategy;","var GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;","var LinkedInStrategy = require('passport-linkedin-oauth2').Strategy;","var OAuthStrategy = require('passport-oauth').OAuthStrategy;","var OAuth2Strategy = require('passport-oauth').OAuth2Strategy;","","var secrets = require('./secrets');","var User = require('../models/User');","","passport.serializeUser(function(user, done) {","  done(null, user.id);","});","","passport.deserializeUser(function(id, done) {","  User.findById(id, function(err, user) {","    done(err, user);","  });","});","","/**"," * Sign in with Instagram."," */","passport.use(new InstagramStrategy(secrets.instagram,function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ instagram: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already an Instagram account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.instagram = profile.id;","          user.tokens.push({ kind: 'instagram', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.picture = user.profile.picture || profile._json.data.profile_picture;","          user.profile.website = user.profile.website || profile._json.data.website;","          user.save(function(err) {","            req.flash('info', { msg: 'Instagram account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ instagram: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","","      var user = new User();","      user.instagram = profile.id;","      user.tokens.push({ kind: 'instagram', accessToken: accessToken });","      user.profile.name = profile.displayName;","      // Similar to Twitter API, assigns a temporary e-mail address","      // to get on with the registration process. It can be changed later","      // to a valid e-mail address in Profile Management.","      user.email = profile.username + \"@instagram.com\";","      user.profile.website = profile._json.data.website;","      user.profile.picture = profile._json.data.profile_picture;","      user.save(function(err) {","        done(err, user);","      });","    });","  }","}));","","/**"," * Sign in using Email and Password."," */","passport.use(new LocalStrategy({ usernameField: 'email' }, function(email, password, done) {","  email = email.toLowerCase();","  User.findOne({ email: email }, function(err, user) {","    if (!user) return done(null, false, { message: 'Email ' + email + ' not found'});","    user.comparePassword(password, function(err, isMatch) {","      if (isMatch) {","        return done(null, user);","      } else {","        return done(null, false, { message: 'Invalid email or password.' });","      }","    });","  });","}));","","/**"," * OAuth Strategy Overview"," *"," * - User is already logged in."," *   - Check if there is an existing account with a provider id."," *     - If there is, return an error message. (Account merging not supported)"," *     - Else link new OAuth account with currently logged-in user."," * - User is not logged in."," *   - Check if it's a returning user."," *     - If returning user, sign in and we are done."," *     - Else check if there is an existing account with user's email."," *       - If there is, return an error message."," *       - Else create a new account."," */","","/**"," * Sign in with Facebook."," */","passport.use(new FacebookStrategy(secrets.facebook, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ facebook: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Facebook account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.facebook = profile.id;","          user.tokens.push({ kind: 'facebook', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.gender = user.profile.gender || profile._json.gender;","          user.profile.picture = user.profile.picture || 'https://graph.facebook.com/' + profile.id + '/picture?type=large';","          user.save(function(err) {","            req.flash('info', { msg: 'Facebook account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ facebook: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.email }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Facebook manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.email = profile._json.email;","          user.facebook = profile.id;","          user.tokens.push({ kind: 'facebook', accessToken: accessToken });","          user.profile.name = profile.displayName;","          user.profile.gender = profile._json.gender;","          user.profile.picture = 'https://graph.facebook.com/' + profile.id + '/picture?type=large';","          user.profile.location = (profile._json.location) ? profile._json.location.name : '';","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","/**"," * Sign in with GitHub."," */","passport.use(new GitHubStrategy(secrets.github, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ github: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a GitHub account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.github = profile.id;","          user.tokens.push({ kind: 'github', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.picture = user.profile.picture || profile._json.avatar_url;","          user.profile.location = user.profile.location || profile._json.location;","          user.profile.website = user.profile.website || profile._json.blog;","          user.save(function(err) {","            req.flash('info', { msg: 'GitHub account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ github: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.email }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with GitHub manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.email = profile._json.email;","          user.github = profile.id;","          user.tokens.push({ kind: 'github', accessToken: accessToken });","          user.profile.name = profile.displayName;","          user.profile.picture = profile._json.avatar_url;","          user.profile.location = profile._json.location;","          user.profile.website = profile._json.blog;","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","// Sign in with Twitter.","","passport.use(new TwitterStrategy(secrets.twitter, function(req, accessToken, tokenSecret, profile, done) {","  if (req.user) {","    User.findOne({ twitter: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Twitter account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.twitter = profile.id;","          user.tokens.push({ kind: 'twitter', accessToken: accessToken, tokenSecret: tokenSecret });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.location = user.profile.location || profile._json.location;","          user.profile.picture = user.profile.picture || profile._json.profile_image_url_https;","          user.save(function(err) {","            req.flash('info', { msg: 'Twitter account has been linked.' });","            done(err, user);","          });","        });","      }","    });","","  } else {","    User.findOne({ twitter: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      var user = new User();","      // Twitter will not provide an email address.  Period.","      // But a personâ€™s twitter username is guaranteed to be unique","      // so we can \"fake\" a twitter email address as follows:","      user.email = profile.username + \"@twitter.com\";","      user.twitter = profile.id;","      user.tokens.push({ kind: 'twitter', accessToken: accessToken, tokenSecret: tokenSecret });","      user.profile.name = profile.displayName;","      user.profile.location = profile._json.location;","      user.profile.picture = profile._json.profile_image_url_https;","      user.save(function(err) {","        done(err, user);","      });","    });","  }","}));","","/**"," * Sign in with Google."," */","passport.use(new GoogleStrategy(secrets.google, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ google: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a Google account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.google = profile.id;","          user.tokens.push({ kind: 'google', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.gender = user.profile.gender || profile._json.gender;","          user.profile.picture = user.profile.picture || profile._json.picture;","          user.save(function(err) {","            req.flash('info', { msg: 'Google account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ google: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.email }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Google manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.email = profile._json.email;","          user.google = profile.id;","          user.tokens.push({ kind: 'google', accessToken: accessToken });","          user.profile.name = profile.displayName;","          user.profile.gender = profile._json.gender;","          user.profile.picture = profile._json.picture;","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","/**"," * Sign in with LinkedIn."," */","passport.use(new LinkedInStrategy(secrets.linkedin, function(req, accessToken, refreshToken, profile, done) {","  if (req.user) {","    User.findOne({ linkedin: profile.id }, function(err, existingUser) {","      if (existingUser) {","        req.flash('errors', { msg: 'There is already a LinkedIn account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });","        done(err);","      } else {","        User.findById(req.user.id, function(err, user) {","          user.linkedin = profile.id;","          user.tokens.push({ kind: 'linkedin', accessToken: accessToken });","          user.profile.name = user.profile.name || profile.displayName;","          user.profile.location = user.profile.location || profile._json.location.name;","          user.profile.picture = user.profile.picture || profile._json.pictureUrl;","          user.profile.website = user.profile.website || profile._json.publicProfileUrl;","          user.save(function(err) {","            req.flash('info', { msg: 'LinkedIn account has been linked.' });","            done(err, user);","          });","        });","      }","    });","  } else {","    User.findOne({ linkedin: profile.id }, function(err, existingUser) {","      if (existingUser) return done(null, existingUser);","      User.findOne({ email: profile._json.emailAddress }, function(err, existingEmailUser) {","        if (existingEmailUser) {","          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with LinkedIn manually from Account Settings.' });","          done(err);","        } else {","          var user = new User();","          user.linkedin = profile.id;","          user.tokens.push({ kind: 'linkedin', accessToken: accessToken });","          user.email = profile._json.emailAddress;","          user.profile.name = profile.displayName;","          user.profile.location = profile._json.location.name;","          user.profile.picture = profile._json.pictureUrl;","          user.profile.website = profile._json.publicProfileUrl;","          user.save(function(err) {","            done(err, user);","          });","        }","      });","    });","  }","}));","","/**"," * Tumblr API OAuth."," */","passport.use('tumblr', new OAuthStrategy({","    requestTokenURL: 'http://www.tumblr.com/oauth/request_token',","    accessTokenURL: 'http://www.tumblr.com/oauth/access_token',","    userAuthorizationURL: 'http://www.tumblr.com/oauth/authorize',","    consumerKey: secrets.tumblr.consumerKey,","    consumerSecret: secrets.tumblr.consumerSecret,","    callbackURL: secrets.tumblr.callbackURL,","    passReqToCallback: true","  },","  function(req, token, tokenSecret, profile, done) {","    User.findById(req.user._id, function(err, user) {","      user.tokens.push({ kind: 'tumblr', accessToken: token, tokenSecret: tokenSecret });","      user.save(function(err) {","        done(err, user);","      });","    });","  }","));","","/**"," * Foursquare API OAuth."," */","passport.use('foursquare', new OAuth2Strategy({","    authorizationURL: 'https://foursquare.com/oauth2/authorize',","    tokenURL: 'https://foursquare.com/oauth2/access_token',","    clientID: secrets.foursquare.clientId,","    clientSecret: secrets.foursquare.clientSecret,","    callbackURL: secrets.foursquare.redirectUrl,","    passReqToCallback: true","  },","  function(req, accessToken, refreshToken, profile, done) {","    User.findById(req.user._id, function(err, user) {","      user.tokens.push({ kind: 'foursquare', accessToken: accessToken });","      user.save(function(err) {","        done(err, user);","      });","    });","  }","));","","/**"," * Venmo API OAuth."," */","passport.use('venmo', new OAuth2Strategy({","    authorizationURL: 'https://api.venmo.com/v1/oauth/authorize',","    tokenURL: 'https://api.venmo.com/v1/oauth/access_token',","    clientID: secrets.venmo.clientId,","    clientSecret: secrets.venmo.clientSecret,","    callbackURL: secrets.venmo.redirectUrl,","    passReqToCallback: true","  },","  function(req, accessToken, refreshToken, profile, done) {","    User.findById(req.user._id, function(err, user) {","      user.tokens.push({ kind: 'venmo', accessToken: accessToken });","      user.save(function(err) {","        done(err, user);","      });","    });","  }","));","","/**"," * Login Required middleware."," */","exports.isAuthenticated = function(req, res, next) {","  if (req.isAuthenticated()) return next();","  res.redirect('/login');","};","","/**"," * Authorization Required middleware."," */","exports.isAuthorized = function(req, res, next) {","  var provider = req.path.split('/').slice(-1)[0];","","  if (_.find(req.user.tokens, { kind: provider })) {","    next();","  } else {","    res.redirect('/auth/' + provider);","  }","};"]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":3},"end":{"row":291,"column":0},"action":"insert","lines":["",""]},{"start":{"row":291,"column":0},"end":{"row":291,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":1},"end":{"row":291,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":2},"end":{"row":291,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":0},"end":{"row":337,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":1},"end":{"row":337,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":2},"end":{"row":338,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":0},"end":{"row":338,"column":0},"action":"remove","lines":["*/",""]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":0},"end":{"row":292,"column":0},"action":"remove","lines":[" /*",""]}]}],[{"group":"doc","deltas":[{"start":{"row":290,"column":3},"end":{"row":291,"column":0},"action":"insert","lines":["",""]},{"start":{"row":291,"column":0},"end":{"row":291,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":1},"end":{"row":291,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":291,"column":2},"end":{"row":291,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":0},"end":{"row":337,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":337,"column":1},"end":{"row":337,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":27,"column":3},"end":{"row":28,"column":0},"action":"insert","lines":["",""]},{"start":{"row":28,"column":0},"end":{"row":28,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":28,"column":1},"end":{"row":28,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":28,"column":2},"end":{"row":28,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":0},"end":{"row":69,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":69,"column":1},"end":{"row":69,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":341,"column":3},"end":{"row":342,"column":0},"action":"insert","lines":["",""]},{"start":{"row":342,"column":0},"end":{"row":342,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":342,"column":1},"end":{"row":342,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":342,"column":2},"end":{"row":342,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":361,"column":0},"end":{"row":361,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":361,"column":1},"end":{"row":361,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":364,"column":3},"end":{"row":365,"column":0},"action":"insert","lines":["",""]},{"start":{"row":365,"column":0},"end":{"row":365,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":365,"column":1},"end":{"row":365,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":365,"column":2},"end":{"row":365,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":0},"end":{"row":383,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":1},"end":{"row":383,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":386,"column":3},"end":{"row":387,"column":0},"action":"insert","lines":["",""]},{"start":{"row":387,"column":0},"end":{"row":387,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":387,"column":1},"end":{"row":387,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":387,"column":2},"end":{"row":387,"column":3},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":405,"column":0},"end":{"row":405,"column":1},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":405,"column":1},"end":{"row":405,"column":2},"action":"insert","lines":["/"]}]}]]},"ace":{"folds":[],"scrolltop":5540,"scrollleft":0,"selection":{"start":{"row":412,"column":2},"end":{"row":412,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1426506420295,"hash":"c24155ee85590174ed4cb502bdd5b95d002cf430"}